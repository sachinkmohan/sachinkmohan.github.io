---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import Section from "../../../components/Section.astro";
import BlogCard from "../../../components/BlogCard.astro";
import { slugifyTag, unslugifyTag, getAllTags, getPostsByTag } from "../../../utils/tags";

// Generate static paths for all tags
export async function getStaticPaths() {
  const allTags = await getAllTags();
  
  return allTags.map((tag) => ({
    params: { tag: slugifyTag(tag) },
    props: { tag },
  }));
}

const { tag } = Astro.props;
const allTags = await getAllTags();
const tagName = unslugifyTag(Astro.params.tag!, allTags);
const posts = await getPostsByTag(tagName);
const postCount = posts.length;
---

<Layout>
  <Section>
    <!-- Breadcrumb navigation -->
    <nav class="breadcrumb">
      <a href="/">Home</a>
      <span class="separator">→</span>
      <a href="/blog">Blog</a>
      <span class="separator">→</span>
      <a href="/blog/tags">Tags</a>
      <span class="separator">→</span>
      <span class="current">{tagName}</span>
    </nav>

    <!-- Page header -->
    <div class="tag-header">
      <h1>Posts tagged with "{tagName}"</h1>
      <p class="post-count">
        {postCount} {postCount === 1 ? "post" : "posts"} found
      </p>
    </div>

    <!-- Posts list -->
    {
      posts.length > 0 ? (
        <div class="posts-list">
          {posts.map((post) => (
            <BlogCard post={post} />
          ))}
        </div>
      ) : (
        <div class="empty-state">
          <p>No posts found with this tag.</p>
          <a href="/blog" class="back-link">← View all posts</a>
        </div>
      )
    }

    <!-- Navigation links -->
    <div class="navigation-links">
      <a href="/blog" class="nav-link">← All Posts</a>
      <a href="/blog/tags" class="nav-link">View All Tags →</a>
    </div>
  </Section>
</Layout>

<style>
  .breadcrumb {
    font-size: 0.875rem;
    color: var(--gray-600, #6b7280);
    margin-bottom: 2rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;

    a {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      transition: color 0.2s;

      &:hover {
        text-decoration: underline;
      }
    }

    .separator {
      color: var(--gray-400, #9ca3af);
    }

    .current {
      color: var(--dark);
      font-weight: 500;
    }
  }

  .tag-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--gray-200, #e5e7eb);

    h1 {
      margin-bottom: 0.5rem;
      color: var(--dark);
    }

    .post-count {
      color: var(--gray-600, #6b7280);
      font-size: 1rem;
      margin: 0;
    }
  }

  .posts-list {
    margin-bottom: 3rem;
  }

  .empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--gray-600, #6b7280);

    p {
      font-size: 1.125rem;
      margin-bottom: 1rem;
    }

    .back-link {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      font-weight: 500;

      &:hover {
        text-decoration: underline;
      }
    }
  }

  .navigation-links {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    padding-top: 2rem;
    border-top: 1px solid var(--gray-200, #e5e7eb);
    flex-wrap: wrap;

    .nav-link {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      font-weight: 500;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: all 0.2s;

      &:hover {
        background-color: var(--gray-100, #f3f4f6);
        transform: translateX(2px);
      }
    }

    @media screen and (max-width: 600px) {
      flex-direction: column;
      align-items: stretch;

      .nav-link {
        text-align: center;
      }
    }
  }
</style>
