---
import Layout from "../../layouts/Layout.astro";
import Section from "../../components/Section.astro";
import TagBadge from "../../components/TagBadge.astro";
import { getTagsByPopularity } from "../../utils/tags";

// Get all tags sorted by popularity (most posts first)
const tagsByPopularity = await getTagsByPopularity();
const totalTags = tagsByPopularity.length;
const totalPosts = tagsByPopularity.reduce((sum, [_, count]) => sum + count, 0);
---

<Layout>
  <Section>
    <!-- Breadcrumb navigation -->
    <nav class="breadcrumb">
      <a href="/">Home</a>
      <span class="separator">→</span>
      <a href="/blog">Blog</a>
      <span class="separator">→</span>
      <span class="current">All Tags</span>
    </nav>

    <!-- Page header -->
    <div class="header">
      <h1>All Tags</h1>
      <p class="subtitle">
        Browse all {totalTags} {totalTags === 1 ? "tag" : "tags"} across {totalPosts} blog {totalPosts === 1 ? "post" : "posts"}
      </p>
    </div>

    <!-- Tags display -->
    {
      tagsByPopularity.length > 0 ? (
        <div class="tags-container">
          <div class="tags-grid">
            {tagsByPopularity.map(([tag, count]) => (
              <div class="tag-item">
                <TagBadge tag={tag} count={count} showCount={true} />
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="empty-state">
          <p>No tags found yet.</p>
          <a href="/blog" class="back-link">← View all posts</a>
        </div>
      )
    }

    <!-- Navigation links -->
    <div class="navigation-links">
      <a href="/blog" class="nav-link">← Back to Blog</a>
    </div>
  </Section>
</Layout>

<style>
  .breadcrumb {
    font-size: 0.875rem;
    color: var(--gray-600, #6b7280);
    margin-bottom: 2rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;

    a {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      transition: color 0.2s;

      &:hover {
        text-decoration: underline;
      }
    }

    .separator {
      color: var(--gray-400, #9ca3af);
    }

    .current {
      color: var(--dark);
      font-weight: 500;
    }
  }

  .header {
    margin-bottom: 3rem;
    text-align: center;

    h1 {
      margin-bottom: 0.5rem;
      color: var(--dark);
    }

    .subtitle {
      color: var(--gray-600, #6b7280);
      font-size: 1.125rem;
      margin: 0;
    }
  }

  .tags-container {
    margin-bottom: 3rem;
  }

  .tags-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    background: linear-gradient(
      135deg,
      var(--gray-50, #f9fafb) 0%,
      var(--gray-100, #f3f4f6) 100%
    );
    border-radius: 1rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

    .tag-item {
      /* Tag items will naturally flow in the flexbox */
      animation: fadeIn 0.3s ease-in-out;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--gray-600, #6b7280);

    p {
      font-size: 1.125rem;
      margin-bottom: 1rem;
    }

    .back-link {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      font-weight: 500;

      &:hover {
        text-decoration: underline;
      }
    }
  }

  .navigation-links {
    display: flex;
    justify-content: center;
    padding-top: 2rem;
    border-top: 1px solid var(--gray-200, #e5e7eb);

    .nav-link {
      color: var(--accent, #4f46e5);
      text-decoration: none;
      font-weight: 500;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: all 0.2s;

      &:hover {
        background-color: var(--gray-100, #f3f4f6);
      }
    }
  }

  @media screen and (max-width: 600px) {
    .tags-grid {
      padding: 1rem;
      gap: 0.75rem;
    }

    .header h1 {
      font-size: 1.75rem;
    }

    .header .subtitle {
      font-size: 1rem;
    }
  }
</style>
